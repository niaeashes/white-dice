import Dice from './dice'
import math from 'mathjs'

const KEY_NO_PATTERN = /^[kK]([0-9]+)(?:[@cC]([0-9]+))?((?:[\+\-][0-9]+)*)$/
const DEFAULT_CRITICAL = 10

class KeyNoMatcher {

  match(str) {
    return !! str.match(KEY_NO_PATTERN)
  }

}

const matcher = new KeyNoMatcher()

class KeyNoCommand {

  constructor(code) {
    if ( typeof code == 'string' && matcher.match(code) ) {
      this.initByCode(code)
    } else {
      this.initByValue(arguments[0], arguments[1], arguments[2])
    }
  }

  initByCode(code) {
    const match = code.match(KEY_NO_PATTERN)
    this.initByValue(match[1], match[2], match[3])
  }

  initByValue(keyNo, critical, exp="") {
    this.no = parseInt(keyNo)
    this.critical = parseInt(critical || DEFAULT_CRITICAL)
    this.exp = exp
  }

  get raw() {
    return `k${this.no}c${this.critical}${this.exp}`
  }

  roll() {
    const dice = new Dice("2D6")
    return new KeyNoResult(dice.roll(), this)
  }

  run() {
    const result = this.roll()
    let response = {
      content: `( ${result.dices.join(' + ')} = ${result.sum} \u2192 ${Math.max(result.result, 0)} ${result.humanize ? `**${result.humanize}** ` : ''}) ${this.exp} = ${result.damage}`,
      fields: [
        { name: "威力", value: this.no, inline: true },
        { name: "C値", value: this.critical, inline: true },
        { name: "出目", value: result.dices.join(', '), inline: true }
      ]
    }
    if ( result.isCritical ) {
      response.fields.push({ name: "追加ロール", value: `\`\`\`${this.raw}+${result.result}\`\`\`` })
    }
    return response
  }

}

class KeyNoResult {
  constructor(rollResult, command) {
    this.rollResult = rollResult
    this.command = command
  }

  get dices() {
    return this.rollResult.results
  }

  get sum() {
    return this.rollResult.results.reduce((sum, value) => sum + value, 0)
  }

  get table() {
    return table[this.command.no]
  }

  get result() {
    return this.table[this.sum - 2]
  }

  get damage() {
    if ( this.result == -1 ) {
      return math.eval(`0${this.command.exp}`)
    }
    return math.eval(`${this.result}${this.command.exp}`)
  }

  get humanize() {
    if ( this.result == -1 ) {
      return "自動失敗"
    } else if ( this.isCritical ) {
      return "クリティカル！"
    }
    return ""
  }

  get isCritical() {
    return this.sum >= this.command.critical
  }
}

const table = {
    0: [ -1, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4 ],
    1: [ -1, 0, 0, 0, 1, 2, 3, 3, 3, 4, 4 ],
    3: [ -1, 0, 0, 1, 1, 2, 3, 4, 4, 5, 5 ],
    4: [ -1, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5 ],
    5: [ -1, 0, 1, 1, 2, 2, 3, 4, 5, 5, 5 ],
    6: [ -1, 0, 1, 1, 2, 3, 3, 4, 5, 5, 5 ],
    7: [ -1, 0, 1, 1, 2, 3, 4, 4, 5, 5, 6 ],
    8: [ -1, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6 ],
    9: [ -1, 0, 1, 2, 3, 3, 4, 4, 5, 6, 7 ],
   10: [ -1, 1, 1, 2, 3, 3, 4, 5, 5, 6, 7 ],
   11: [ -1, 1, 2, 2, 3, 3, 4, 5, 6, 6, 7 ],
   12: [ -1, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7 ],
   13: [ -1, 1, 2, 3, 3, 4, 4, 5, 6, 7, 7 ],
   14: [ -1, 1, 2, 3, 4, 4, 4, 5, 6, 7, 8 ],
   15: [ -1, 1, 2, 3, 4, 4, 5, 5, 6, 7, 8 ],
   16: [ -1, 1, 2, 3, 4, 4, 5, 6, 7, 7, 8 ],
   17: [ -1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8 ],
   18: [ -1, 1, 2, 3, 4, 5, 6, 6, 7, 7, 8 ],
   19: [ -1, 1, 2, 3, 4, 5, 6, 7, 7, 8, 9 ],
   20: [ -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ],
   21: [ -1, 1, 2, 3, 4, 6, 6, 7, 8, 9, 10 ],
   22: [ -1, 1, 2, 3, 5, 6, 6, 7, 8, 9, 10 ],
   23: [ -1, 2, 2, 3, 5, 6, 7, 7, 8, 9, 10 ],
   24: [ -1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10 ],
   25: [ -1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10 ],
   26: [ -1, 2, 3, 4, 5, 6, 8, 8, 9, 9, 10 ],
   27: [ -1, 2, 3, 4, 6, 6, 8, 8, 9, 9, 10 ],
   28: [ -1, 2, 3, 4, 6, 6, 8, 9, 9, 10, 10 ],
   29: [ -1, 2, 3, 4, 6, 7, 8, 9, 9, 10, 10 ],
   30: [ -1, 2, 4, 4, 6, 7, 8, 9, 10, 10, 10 ],
   31: [ -1, 2, 4, 5, 6, 7, 8, 9, 10, 10, 11 ],
   32: [ -1, 3, 4, 5, 6, 8, 9, 10, 10, 10, 11 ],
   33: [ -1, 3, 4, 5, 6, 8, 8, 10, 10, 10, 11 ],
   34: [ -1, 3, 4, 5, 6, 8, 9, 10, 10, 11, 11 ],
   35: [ -1, 3, 4, 5, 7, 8, 9, 10, 10, 11, 12 ],
   36: [ -1, 3, 5, 5, 7, 8, 9, 10, 11, 11, 12 ],
   37: [ -1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 12 ],
   38: [ -1, 3, 5, 6, 7, 8, 10, 10, 11, 12, 13 ],
   39: [ -1, 4, 5, 6, 7, 8, 10, 11, 11, 12, 13 ],
   40: [ -1, 4, 5, 6, 7, 9, 10, 11, 11, 12, 13 ],
   41: [ -1, 4, 6, 6, 7, 9, 10, 11, 12, 12, 13 ],
   42: [ -1, 4, 6, 7, 7, 9, 10, 11, 12, 13, 13 ],
   43: [ -1, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14 ],
   44: [ -1, 4, 6, 7, 8, 10, 10, 11, 12, 13, 14 ],
   45: [ -1, 4, 6, 7, 9, 10, 10, 11, 12, 13, 14 ],
   46: [ -1, 4, 6, 7, 9, 10, 10, 12, 13, 13, 14 ],
   47: [ -1, 4, 6, 7, 9, 10, 11, 12, 13, 13, 15 ],
   48: [ -1, 4, 6, 7, 9, 10, 12, 12, 13, 13, 15 ],
   49: [ -1, 4, 6, 7, 10, 10, 12, 12, 13, 14, 15 ],
   50: [ -1, 4, 6, 8, 10, 10, 12, 12, 13, 15, 15 ],
   51: [ -1, 5, 7, 8, 10, 10, 12, 12, 13, 15, 15 ],
   52: [ -1, 5, 7, 8, 10, 11, 12, 12, 13, 15, 15 ],
   53: [ -1, 5, 7, 9, 10, 11, 12, 12, 14, 15, 15 ],
   54: [ -1, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16 ],
   55: [ -1, 5, 7, 10, 10, 11, 12, 13, 14, 16, 16 ],
   56: [ -1, 5, 8, 10, 10, 11, 12, 13, 15, 16, 16 ],
   57: [ -1, 5, 8, 10, 11, 11, 12, 13, 15, 16, 17 ],
   58: [ -1, 5, 8, 10, 11, 12, 12, 13, 15, 16, 17 ],
   59: [ -1, 5, 9, 10, 11, 12, 12, 14, 15, 16, 17 ],
   60: [ -1, 5, 9, 10, 11, 12, 13, 14, 15, 16, 18 ],
   61: [ -1, 5, 9, 10, 11, 12, 13, 14, 16, 17, 18 ],
   62: [ -1, 5, 9, 10, 11, 13, 13, 14, 16, 17, 18 ],
   63: [ -1, 5, 9, 10, 11, 13, 13, 15, 17, 17, 18 ],
   64: [ -1, 5, 9, 10, 11, 13, 14, 15, 17, 17, 18 ],
   65: [ -1, 5, 9, 10, 12, 13, 14, 15, 17, 18, 18 ],
   66: [ -1, 5, 9, 10, 12, 13, 15, 15, 17, 18, 19 ],
   67: [ -1, 5, 9, 10, 12, 13, 15, 16, 17, 19, 19 ],
   68: [ -1, 5, 9, 10, 12, 14, 15, 16, 17, 19, 19 ],
   69: [ -1, 5, 9, 10, 12, 14, 16, 16, 17, 19, 19 ],
   70: [ -1, 5, 9, 10, 12, 14, 16, 17, 18, 19, 19 ],
   71: [ -1, 5, 9, 10, 13, 14, 16, 17, 18, 19, 20 ],
   72: [ -1, 5, 9, 10, 13, 15, 16, 17, 18, 19, 20 ],
   73: [ -1, 5, 9, 10, 13, 15, 16, 17, 19, 20, 21 ],
   74: [ -1, 6, 9, 10, 13, 15, 16, 18, 19, 20, 21 ],
   75: [ -1, 6, 9, 10, 13, 16, 16, 18, 19, 20, 21 ],
   76: [ -1, 6, 9, 10, 13, 16, 17, 18, 19, 20, 21 ],
   77: [ -1, 6, 9, 10, 13, 16, 17, 18, 20, 21, 22 ],
   78: [ -1, 6, 9, 10, 13, 16, 17, 19, 20, 22, 23 ],
   79: [ -1, 6, 9, 10, 13, 16, 18, 19, 20, 22, 23 ],
   80: [ -1, 6, 9, 10, 13, 16, 18, 20, 21, 22, 23 ],
   81: [ -1, 6, 9, 10, 13, 17, 18, 20, 21, 22, 23 ],
   82: [ -1, 6, 9, 10, 14, 17, 18, 20, 21, 22, 24 ],
   83: [ -1, 6, 9, 11, 14, 17, 18, 20, 21, 23, 24 ],
   84: [ -1, 6, 9, 11, 14, 17, 19, 20, 21, 23, 24 ],
   85: [ -1, 6, 9, 11, 14, 17, 19, 21, 22, 23, 24 ],
   86: [ -1, 7, 10, 11, 14, 17, 19, 21, 22, 23, 25 ],
   87: [ -1, 7, 10, 12, 14, 17, 19, 21, 22, 24, 25 ],
   88: [ -1, 7, 10, 12, 14, 18, 19, 21, 22, 24, 25 ],
   89: [ -1, 7, 10, 12, 15, 18, 19, 21, 22, 24, 26 ],
   90: [ -1, 7, 10, 12, 15, 18, 19, 21, 23, 25, 26 ],
   91: [ -1, 7, 11, 13, 15, 18, 19, 21, 23, 25, 26 ],
   92: [ -1, 7, 11, 13, 15, 18, 20, 21, 23, 25, 27 ],
   93: [ -1, 8, 11, 13, 15, 18, 20, 22, 23, 25, 27 ],
   94: [ -1, 8, 11, 13, 16, 18, 20, 22, 23, 25, 28 ],
   95: [ -1, 8, 11, 14, 16, 18, 20, 22, 23, 26, 28 ],
   96: [ -1, 8, 11, 14, 16, 19, 20, 22, 23, 26, 28 ],
   97: [ -1, 8, 12, 14, 16, 19, 20, 22, 24, 26, 28 ],
   98: [ -1, 8, 12, 15, 16, 19, 20, 22, 24, 27, 28 ],
   99: [ -1, 8, 12, 15, 17, 19, 20, 22, 24, 27, 29 ],
  100: [ -1, 8, 12, 15, 18, 19, 20, 22, 24, 27, 30 ]
}

export const Matcher = matcher
export const Command = KeyNoCommand
