var pattern = /^k([0-9]+)(?:@([0-9]+))?([\+\-0-9]*)?/i
  , dice = require('./dice.js')
  , math = require('mathjs')

exports.isKeyNo = function(msg) {
  return !! pattern.exec(msg)
}

exports.resultEval = function(face, exp) {
  if ( typeof exp == 'undefined' ) exp = ""
  if ( ! (""+face).match(/^[0-9]+$/) ) return face;
  console.log(""+face+exp)
  return math.eval(""+face+exp)
}

exports.resultFunction = function(keyNo, critical, exp) {
  return function(dices, log) {
    var result = dices.reduce(function(prev, current, i, arr) { return prev + current })
      , face = table[keyNo][result-2]
      , isCritical = ( critical <= result )
      , damage = exports.resultEval(face, exp)
    var dices = [
      "出目 : "+dices[0]+", "+dices[1]+" = "+result+
        ( isCritical ? " Critical!!!" : "" ),
      "\t威力表: "+keyNo+" (C値: "+critical+")",
      "\t結果 : "+face,
      "\tダメージ : "+damage
    ]
    if ( isCritical ) {
      dices.push("\t追加ロール : "+"k"+keyNo+"@"+critical+"+"+damage);
    }
    dices.push
    return dices
  }
}

exports.apply = function(data) {
  var diceCode = '2d6'
    , critical = 1*pattern.exec(data.msg)[2]
    , keyNo = 1*pattern.exec(data.msg)[1]
    , exp = pattern.exec(data.msg)[3]
  if ( Number.isNaN( critical ) ) { critical = 10 }
  var resultFunction = exports.resultFunction(keyNo, critical, exp)
  var result = dice.roll(diceCode, resultFunction)
  for ( var i in result ) {
    data.dice.push(result[i])
  }
  return data
}

var table = {
    0: [ "自動失敗", 0, 0, 0, 1, 2, 2, 3, 3, 4, 4 ],
    1: [ "自動失敗", 0, 0, 0, 1, 2, 3, 3, 3, 4, 4 ],
    3: [ "自動失敗", 0, 0, 1, 1, 2, 3, 4, 4, 5, 5 ],
    4: [ "自動失敗", 0, 0, 1, 2, 2, 3, 4, 4, 5, 5 ],
    5: [ "自動失敗", 0, 1, 1, 2, 2, 3, 4, 5, 5, 5 ],
    6: [ "自動失敗", 0, 1, 1, 2, 3, 3, 4, 5, 5, 5 ],
    7: [ "自動失敗", 0, 1, 1, 2, 3, 4, 4, 5, 5, 6 ],
    8: [ "自動失敗", 0, 1, 2, 2, 3, 4, 4, 5, 6, 6 ],
    9: [ "自動失敗", 0, 1, 2, 3, 3, 4, 4, 5, 6, 7 ],
   10: [ "自動失敗", 1, 1, 2, 3, 3, 4, 5, 5, 6, 7 ],
   11: [ "自動失敗", 1, 2, 2, 3, 3, 4, 5, 6, 6, 7 ],
   12: [ "自動失敗", 1, 2, 2, 3, 4, 4, 5, 6, 6, 7 ],
   13: [ "自動失敗", 1, 2, 3, 3, 4, 4, 5, 6, 7, 7 ],
   14: [ "自動失敗", 1, 2, 3, 4, 4, 4, 5, 6, 7, 8 ],
   15: [ "自動失敗", 1, 2, 3, 4, 4, 5, 5, 6, 7, 8 ],
   16: [ "自動失敗", 1, 2, 3, 4, 4, 5, 6, 7, 7, 8 ],
   17: [ "自動失敗", 1, 2, 3, 4, 5, 5, 6, 7, 7, 8 ],
   18: [ "自動失敗", 1, 2, 3, 4, 5, 6, 6, 7, 7, 8 ],
   19: [ "自動失敗", 1, 2, 3, 4, 5, 6, 7, 7, 8, 9 ],
   20: [ "自動失敗", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ],
   21: [ "自動失敗", 1, 2, 3, 4, 6, 6, 7, 8, 9, 10 ],
   22: [ "自動失敗", 1, 2, 3, 5, 6, 6, 7, 8, 9, 10 ],
   23: [ "自動失敗", 2, 2, 3, 5, 6, 7, 7, 8, 9, 10 ],
   24: [ "自動失敗", 2, 3, 4, 5, 6, 7, 7, 8, 9, 10 ],
   25: [ "自動失敗", 2, 3, 4, 5, 6, 7, 8, 8, 9, 10 ],
   26: [ "自動失敗", 2, 3, 4, 5, 6, 8, 8, 9, 9, 10 ],
   27: [ "自動失敗", 2, 3, 4, 6, 6, 8, 8, 9, 9, 10 ],
   28: [ "自動失敗", 2, 3, 4, 6, 6, 8, 9, 9, 10, 10 ],
   29: [ "自動失敗", 2, 3, 4, 6, 7, 8, 9, 9, 10, 10 ],
   30: [ "自動失敗", 2, 4, 4, 6, 7, 8, 9, 10, 10, 10 ],
   31: [ "自動失敗", 2, 4, 5, 6, 7, 8, 9, 10, 10, 11 ],
   32: [ "自動失敗", 3, 4, 5, 6, 8, 9, 10, 10, 10, 11 ],
   33: [ "自動失敗", 3, 4, 5, 6, 8, 8, 10, 10, 10, 11 ],
   34: [ "自動失敗", 3, 4, 5, 6, 8, 9, 10, 10, 11, 11 ],
   35: [ "自動失敗", 3, 4, 5, 7, 8, 9, 10, 10, 11, 12 ],
   36: [ "自動失敗", 3, 5, 5, 7, 8, 9, 10, 11, 11, 12 ],
   37: [ "自動失敗", 3, 5, 6, 7, 8, 9, 10, 11, 12, 12 ],
   38: [ "自動失敗", 3, 5, 6, 7, 8, 10, 10, 11, 12, 13 ],
   39: [ "自動失敗", 4, 5, 6, 7, 8, 10, 11, 11, 12, 13 ],
   40: [ "自動失敗", 4, 5, 6, 7, 9, 10, 11, 11, 12, 13 ],
   41: [ "自動失敗", 4, 6, 6, 7, 9, 10, 11, 12, 12, 13 ],
   42: [ "自動失敗", 4, 6, 7, 7, 9, 10, 11, 12, 13, 13 ],
   43: [ "自動失敗", 4, 6, 7, 8, 9, 10, 11, 12, 13, 14 ],
   44: [ "自動失敗", 4, 6, 7, 8, 10, 10, 11, 12, 13, 14 ],
   45: [ "自動失敗", 4, 6, 7, 9, 10, 10, 11, 12, 13, 14 ],
   46: [ "自動失敗", 4, 6, 7, 9, 10, 10, 12, 13, 13, 14 ],
   47: [ "自動失敗", 4, 6, 7, 9, 10, 11, 12, 13, 13, 15 ],
   48: [ "自動失敗", 4, 6, 7, 9, 10, 12, 12, 13, 13, 15 ],
   49: [ "自動失敗", 4, 6, 7, 10, 10, 12, 12, 13, 14, 15 ],
   50: [ "自動失敗", 4, 6, 8, 10, 10, 12, 12, 13, 15, 15 ],
   51: [ "自動失敗", 5, 7, 8, 10, 10, 12, 12, 13, 15, 15 ],
   52: [ "自動失敗", 5, 7, 8, 10, 11, 12, 12, 13, 15, 15 ],
   53: [ "自動失敗", 5, 7, 9, 10, 11, 12, 12, 14, 15, 15 ],
   54: [ "自動失敗", 5, 7, 9, 10, 11, 12, 13, 14, 15, 16 ],
   55: [ "自動失敗", 5, 7, 10, 10, 11, 12, 13, 14, 16, 16 ],
   56: [ "自動失敗", 5, 8, 10, 10, 11, 12, 13, 15, 16, 16 ],
   57: [ "自動失敗", 5, 8, 10, 11, 11, 12, 13, 15, 16, 17 ],
   58: [ "自動失敗", 5, 8, 10, 11, 12, 12, 13, 15, 16, 17 ],
   59: [ "自動失敗", 5, 9, 10, 11, 12, 12, 14, 15, 16, 17 ],
   60: [ "自動失敗", 5, 9, 10, 11, 12, 13, 14, 15, 16, 18 ],
   61: [ "自動失敗", 5, 9, 10, 11, 12, 13, 14, 16, 17, 18 ],
   62: [ "自動失敗", 5, 9, 10, 11, 13, 13, 14, 16, 17, 18 ],
   63: [ "自動失敗", 5, 9, 10, 11, 13, 13, 15, 17, 17, 18 ],
   64: [ "自動失敗", 5, 9, 10, 11, 13, 14, 15, 17, 17, 18 ],
   65: [ "自動失敗", 5, 9, 10, 12, 13, 14, 15, 17, 18, 18 ],
   66: [ "自動失敗", 5, 9, 10, 12, 13, 15, 15, 17, 18, 19 ],
   67: [ "自動失敗", 5, 9, 10, 12, 13, 15, 16, 17, 19, 19 ],
   68: [ "自動失敗", 5, 9, 10, 12, 14, 15, 16, 17, 19, 19 ],
   69: [ "自動失敗", 5, 9, 10, 12, 14, 16, 16, 17, 19, 19 ],
   70: [ "自動失敗", 5, 9, 10, 12, 14, 16, 17, 18, 19, 19 ],
   71: [ "自動失敗", 5, 9, 10, 13, 14, 16, 17, 18, 19, 20 ],
   72: [ "自動失敗", 5, 9, 10, 13, 15, 16, 17, 18, 19, 20 ],
   73: [ "自動失敗", 5, 9, 10, 13, 15, 16, 17, 19, 20, 21 ],
   74: [ "自動失敗", 6, 9, 10, 13, 15, 16, 18, 19, 20, 21 ],
   75: [ "自動失敗", 6, 9, 10, 13, 16, 16, 18, 19, 20, 21 ],
   76: [ "自動失敗", 6, 9, 10, 13, 16, 17, 18, 19, 20, 21 ],
   77: [ "自動失敗", 6, 9, 10, 13, 16, 17, 18, 20, 21, 22 ],
   78: [ "自動失敗", 6, 9, 10, 13, 16, 17, 19, 20, 22, 23 ],
   79: [ "自動失敗", 6, 9, 10, 13, 16, 18, 19, 20, 22, 23 ],
   80: [ "自動失敗", 6, 9, 10, 13, 16, 18, 20, 21, 22, 23 ],
   81: [ "自動失敗", 6, 9, 10, 13, 17, 18, 20, 21, 22, 23 ],
   82: [ "自動失敗", 6, 9, 10, 14, 17, 18, 20, 21, 22, 24 ],
   83: [ "自動失敗", 6, 9, 11, 14, 17, 18, 20, 21, 23, 24 ],
   84: [ "自動失敗", 6, 9, 11, 14, 17, 19, 20, 21, 23, 24 ],
   85: [ "自動失敗", 6, 9, 11, 14, 17, 19, 21, 22, 23, 24 ],
   86: [ "自動失敗", 7, 10, 11, 14, 17, 19, 21, 22, 23, 25 ],
   87: [ "自動失敗", 7, 10, 12, 14, 17, 19, 21, 22, 24, 25 ],
   88: [ "自動失敗", 7, 10, 12, 14, 18, 19, 21, 22, 24, 25 ],
   89: [ "自動失敗", 7, 10, 12, 15, 18, 19, 21, 22, 24, 26 ],
   90: [ "自動失敗", 7, 10, 12, 15, 18, 19, 21, 23, 25, 26 ],
   91: [ "自動失敗", 7, 11, 13, 15, 18, 19, 21, 23, 25, 26 ],
   92: [ "自動失敗", 7, 11, 13, 15, 18, 20, 21, 23, 25, 27 ],
   93: [ "自動失敗", 8, 11, 13, 15, 18, 20, 22, 23, 25, 27 ],
   94: [ "自動失敗", 8, 11, 13, 16, 18, 20, 22, 23, 25, 28 ],
   95: [ "自動失敗", 8, 11, 14, 16, 18, 20, 22, 23, 26, 28 ],
   96: [ "自動失敗", 8, 11, 14, 16, 19, 20, 22, 23, 26, 28 ],
   97: [ "自動失敗", 8, 12, 14, 16, 19, 20, 22, 24, 26, 28 ],
   98: [ "自動失敗", 8, 12, 15, 16, 19, 20, 22, 24, 27, 28 ],
   99: [ "自動失敗", 8, 12, 15, 17, 19, 20, 22, 24, 27, 29 ],
  100: [ "自動失敗", 8, 12, 15, 18, 19, 20, 22, 24, 27, 30 ]
}
